
// Muhammad Ahmad
// 461348
// BSDS 1-A

#include <iostream>
using namespace std;

class Node {
public:
    Node* next;
    int processId;
    int executionTime;
    int remainingTime;

    // Constructor 
    Node(int id, int execTime, int remTime) : processId(id), executionTime(execTime), remainingTime(remTime), next(NULL) {}
};

class CPU {
public:
    Node* head;

    CPU() : head(NULL) {} 

    // Function to add a new Node (process)
    Node* addNode(int id, int execTime, int remTime) {
        Node* newNode = new Node(id, execTime, remTime);

        if (head == NULL) {
            head = newNode;
            head->next = head; 
        } else {
            Node* temp = head;
            while (temp->next != head) {
                temp = temp->next;
            }
            temp->next = newNode;
            newNode->next = head;  // Here I amm Mainitaing  circular nature of the linked list
        }

        return newNode;
    }

    // Function to delete a node
    Node* deleteNode(Node* nodeToDelete) {
        if (head == NULL) return NULL; 

        if (head->next == head && head == nodeToDelete) {  
            delete head;
            head = NULL;
        } else {
            Node* temp = head;
            while (temp->next != nodeToDelete && temp->next != head) {  
                temp = temp->next;
            }
            temp->next = nodeToDelete->next;  
            if (nodeToDelete == head) {
                head = nodeToDelete->next;  // Updating head if the head is being deleted
            }
            delete nodeToDelete;
        }

        return head;
    }

    // Function to simulate CPU scheduling
    void schedule(int timeSlice) {
        Node* current = head;

        cout << "......Cycle begins......" << endl;
        do {
            cout << "Process " << current->processId << " is running." << endl;

            // Now I'm Reducing the remaining time of the current process
            current->remainingTime -= timeSlice;
            
            if (current->remainingTime <= 0) {
                cout << "Process " << current->processId << " has completed." << endl;
                Node* nextProcess = current->next;
                deleteNode(current);
                current = nextProcess;  // Update current to the next process or head
            } else {
                cout << "Process " << current->processId << " remaining time is now: " << current->remainingTime << endl;
                current = current->next;
            }

            Display();

        } while (current != head && head != NULL);  
        
        cout << "......Cycle ends......" << endl;
    }

    void Display() {
        if (head == NULL) 
            return; 
        Node* temp = head;
        do {
            cout << "Process ID: " << temp->processId << ", Remaining Time: " << temp->remainingTime << endl;
            temp = temp->next;
        } while (temp != head);
    }
};

int main() {
    CPU cpu;
    cpu.addNode(1, 10, 9);
    cpu.addNode(2, 5, 3);
    cpu.addNode(3, 8, 6);

    cout << "Initial Processes:" << endl;
    cpu.Display();

    int timeSlice = 4;  
    cpu.schedule(timeSlice);

    return 0;
}
